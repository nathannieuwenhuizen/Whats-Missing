#pragma kernel computeGrid
#pragma kernel generatePointCloud
#pragma kernel debugDisplayGridPoints
#pragma kernel computeGridForMesh
#pragma kernel computeMesh
#pragma kernel filterSolidsPerChunk
#pragma kernel compactPointCloud
#pragma kernel optimizePointCloud
#pragma kernel generatePointCloudMicroVoxels
RWStructuredBuffer<int> indirectChunkArgs2,indirectChunkArgs1;RWStructuredBuffer<float3> gridData;RWStructuredBuffer<int> boundingBox;RWStructuredBuffer<int2> pointCloudDataMip3;RWStructuredBuffer<int> gridPointersMip2,gridPointersMip3,pointCloudDataMip1;RWStructuredBuffer<int2> chunkPointCloudData;RWStructuredBuffer<int> pointCloudDataToSolidId,chunkPointCloudDataToSolidId;StructuredBuffer<int> triangleConnectionTable;RWStructuredBuffer<int> indirectDrawArgs,numSolidsPerChunk,updateChunks,solidsPerChunk,prefilteredSolidIds,solidsFilter;RWStructuredBuffer<float3> chunksCenter;RWStructuredBuffer<int> numPointsInChunk,pointToChunkId;RWStructuredBuffer<float> gridDataLowRes;RWStructuredBuffer<int> volumetricDraw;StructuredBuffer<float3> solidsPos;StructuredBuffer<float4> solidsRot;StructuredBuffer<float3> solidsScale;StructuredBuffer<float> solidsBlend;StructuredBuffer<int> solidsType;StructuredBuffer<float3> solidsColor;StructuredBuffer<float4> solidsAttrs;StructuredBuffer<int> solidsClayObjectId,solidsUpdated;RWStructuredBuffer<int3> meshOutIndices;RWStructuredBuffer<float3> meshOutPoints;RWStructuredBuffer<float4> meshOutColors;uint maxSolids=0,maxSolidsPerVoxel=0,maxSolidsPerVoxelMask=0,chunkId=0,numSolids=0,numSolidsBlending=0;float chunkSize=20.;int numChunksX=0,numChunksY=0,numChunksZ=0,outMeshIndexOffset=0;float solidsMaxInfluence=0.;uint numSolidsUpdated=0;int storeSolidId=0,maxPointCount=0;float seamOffsetMultiplier=1.;groupshared int3 gs_pointCloudData[255];groupshared uint gs_numElements=0,gs_globalOffset=0;
#include"claySDF.compute"
static const int3 cellTable[]={int3(0,0,0),int3(0,0,1),int3(0,0,2),int3(0,0,3),int3(0,1,0),int3(0,1,1),int3(0,1,2),int3(0,1,3),int3(0,2,0),int3(0,2,1),int3(0,2,2),int3(0,2,3),int3(0,3,0),int3(0,3,1),int3(0,3,2),int3(0,3,3),int3(1,0,0),int3(1,0,1),int3(1,0,2),int3(1,0,3),int3(1,1,0),int3(1,1,1),int3(1,1,2),int3(1,1,3),int3(1,2,0),int3(1,2,1),int3(1,2,2),int3(1,2,3),int3(1,3,0),int3(1,3,1),int3(1,3,2),int3(1,3,3),int3(2,0,0),int3(2,0,1),int3(2,0,2),int3(2,0,3),int3(2,1,0),int3(2,1,1),int3(2,1,2),int3(2,1,3),int3(2,2,0),int3(2,2,1),int3(2,2,2),int3(2,2,3),int3(2,3,0),int3(2,3,1),int3(2,3,2),int3(2,3,3),int3(3,0,0),int3(3,0,1),int3(3,0,2),int3(3,0,3),int3(3,1,0),int3(3,1,1),int3(3,1,2),int3(3,1,3),int3(3,2,0),int3(3,2,1),int3(3,2,2),int3(3,2,3),int3(3,3,0),int3(3,3,1),int3(3,3,2),int3(3,3,3)},localGridCellCoords[8]={int3(0,0,0),int3(1,0,0),int3(1,1,0),int3(0,1,0),int3(0,0,1),int3(1,0,1),int3(1,1,1),int3(0,1,1)};static const float3 vertexOffset[8]={float3(0,0,0),float3(1,0,0),float3(1,1,0),float3(0,1,0),float3(0,0,1),float3(1,0,1),float3(1,1,1),float3(0,1,1)};static const int2 edgeConnection[12]={int2(0,1),int2(1,2),int2(2,3),int2(3,0),int2(4,5),int2(5,6),int2(6,7),int2(7,4),int2(0,4),int2(1,5),int2(2,6),int2(3,7)};static const float3 edgeDirection[12]={float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f)},cardinalCellOffset[8]={float3(-1,-1,-1),float3(1,-1,-1),float3(1,1,-1),float3(-1,1,-1),float3(-1,-1,1),float3(1,-1,1),float3(1,1,1),float3(-1,1,1)};static const int cubeEdgeFlags[]={0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0};int f(int x,int f,int y,int z){return x+z*(f+z*y);}uint f(float3 i){uint t=uint(i.x*255)+uint(i.y*255)*256+uint(i.z*255)*256*256;return t;}uint f(uint f,uint x,uint y,uint z,uint t){uint s=(((f<<6|x)<<6|y)<<6|z)<<8|t;return s;}uint s(uint f,uint x,uint y,uint z,uint t){uint s=(((f<<6|x)<<8|y)<<8|z)<<4|t;return s;}uint f(uint f,uint x,uint t){uint s=(f<<6|x)<<18|t;return s;}uint f(uint f,uint t){uint s=f<<24|t;return s;}void s(int f,out int i[5]){i[4]=f&255,f>>=8,i[3]=f&63,f>>=6,i[2]=f&63,f>>=6,i[1]=f&63,f>>=6,i[0]=f&63;}uint s(float f,float i,float y,float x){uint r=uint(round(f*63.)),u=uint(round(i*63.)),z=uint(round(y*63.)),t=uint((x+1.)*.5*16383.),s=((r<<6|u)<<6|z)<<14|t;return s;}float4 s(uint f){float i=float(f&16383)/16383*2.-1.;f>>=14;float u=float(f&63)/63;f>>=6;float y=float(f&63)/63,s=float(f>>6)/63;return float4(s,y,u,i);}float s(float f,float i,float s){float e=max(s-abs(f-i),0.);return min(f,i)-e*e*.25f/s;}float t(float f,float i,float u){float s=abs(u),e=max(s-abs(-f-i),0.);return max(-f,i)+e*e*.25/s;}bool t(uint e,uint f){uint x=f/32;int i=solidsFilter[e*maxSolidsPerVoxelMask+x],u=f-32*x;if(i>>u&1)return true;return false;}void d(uint e,uint f){uint x=f/32;int c=solidsFilter[e*maxSolidsPerVoxelMask+x],i=f-32*x;solidsFilter[e*maxSolidsPerVoxelMask+x]=c&~(1<<i);}bool d(int f){return f>>0&1;}float d(float3 i,float f,float x,uint y,uint c){float u;u=999.;int k=0;uint e=c*maxSolidsPerVoxel;for(uint m=0;m<y;++m){if(!t(c,m)){continue;}uint n=prefilteredSolidIds[e+m];float3 r=solidsScale[n];float z=(r.x+r.y+r.z)*.333333,M=solidsBlend[n]*z;float4 g=solidsAttrs[n];float S=computeClayDistanceFunction(solidsType[n],i,solidsPos[n],solidsRot[n],r,g,z);if(!d(g.w)){if(M==0.)u=min(S,u);else if(M>0.)u=s(S,u,M);else u=t(S,u,M);}if(S>x)d(c,m);x-=abs(M);}return u;}float d(float3 i,float f,out int y,out float3 u,uint x,uint c,uint z){float r;r=1e+10;u=float3(1.,1.,1.);uint e=c*maxSolidsPerVoxel;for(uint m=0;m<x;++m){if(!t(c,m)){continue;}uint n=prefilteredSolidIds[e+m];float3 M=solidsScale[n];float k=(M.x+M.y+M.z)*.333333,S=solidsBlend[n]*k;float3 g=solidsColor[n];float4 p=solidsAttrs[n];float D=computeClayDistanceFunction(solidsType[n],i,solidsPos[n],solidsRot[n],M,p,k);if(D<r)y=n;bool w=d(p.w);if(S==0.){float o=clamp((r-D)/(f*2.),0.,1.);u=lerp(u,g,o);if(!w)r=min(D,r);}else if(S>0.){float o=clamp(.5+.5*(D-r)/S,0.,1.);u=lerp(g,u,o);if(!w)r=s(D,r,S);}else{float o=clamp(.5+.5*(-D-r)/S,0.,1.);u=lerp(g,u,o);if(!w)r=t(D,r,S);if(o<.5)y=n;}}return r;}float3 t(uint f){int i=(f&255)>>0,u=(f&65280)>>8,M=(f&16711680)>>16;return float3(i/255.,u/255.,M/255.);}int3 c(uint f){int i=(f&255)>>0,u=(f&65280)>>8,z=(f&16711680)>>16;return int3(i,u,z);}bool r(int3 f){if(f.x<0)return true;if(f.x>255)return true;if(f.y<0)return true;if(f.y>255)return true;if(f.z<0)return true;if(f.z>255)return true;return false;}float n(int4 f){float s=0.;for(uint i=0;i<numSolids;++i)s+=abs(solidsBlend[i]);return s;}float3 c(int3 f,float i){float s=i*.5,u=chunkSize*.5;float3 t=float3(i*f.x-u,i*f.y-u,i*f.z-u)+s;return t;}void c(float3 f,float x,uint c,inout uint i,inout float m){uint s=numSolidsPerChunk[chunkId],e=c*maxSolidsPerVoxel,u=0;for(u=0;u<s;++u){uint t=solidsPerChunk[chunkId*maxSolids+u];float3 r=solidsScale[t],z=f;if(int(solidsAttrs[t].w)>>1&1)z.x=abs(z.x);float y=max(r.x,max(r.y,r.z))*1.732,M=length(solidsPos[t]-z)-y,n=(r.x+r.y+r.z)*.333333,S=n*2.;if(M<S){prefilteredSolidIds[e+i]=t;i+=1;m+=abs(solidsBlend[t])*n;if(i==maxSolidsPerVoxel){break;}}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGrid(int3 i:SV_DispatchThreadID){float x=chunkSize*.5,u=chunkSize/64,y=chunkSize/256,z=y*.5,M=u*1.732;float3 s=float3(u*i.x-x,u*i.y-x,u*i.z-x);int e=f(i.x,i.y,i.z,64);float3 t=chunksCenter[chunkId];uint S=0;float m=0.;float3 r=s+t;c(r,u*.5,e,S,m);int n=e*maxSolidsPerVoxelMask;for(uint o=0;o<maxSolidsPerVoxelMask;++o)solidsFilter[n+o]=-1;float g=d(r,u,m+u,S,e);gridDataLowRes[e]=g;for(uint k=0;k<8;++k){float3 v=s+y*cardinalCellOffset[k];for(uint R=0;R<8;++R){float3 p=v+z*cardinalCellOffset[R];int3 D=int3((p.x+x)/y,(p.y+x)/y,(p.z+x)/y);int w=f(D.x,D.y,D.z,256);gridData[w]=float3(g,0,0);int l=0;float3 b=float3(1.,1.,1.);if(abs(g)<M){float a=d(p+t,z,l,b,S,e,w);int X=solidsClayObjectId[l]+1;gridData[w]=float3(a,f(b),X);}}}}float n(float f,float c){float i=c-f,u=.5;if(i!=0.)u=f/i;return u;}float2 i(float2 f){float2 e=f.xy>=0.?1.:-1.,i=(1.-abs(f.yx))*e;return i;}float v(float2 f){int i=32;float c=floor(f.x*(i-1)),u=floor(f.y*(i-1)),s=c*i+u;return s;}float x(float3 f){f/=abs(f.x)+abs(f.y)+abs(f.z);f.xy=f.z>=0.?f.xy:i(f.xy);f.xy=f.xy*.5+.5;float s=v(f.xy);return s;}int c(uint f,uint x,uint y,uint t){int s=f<<24|x<<16|y<<8|t;return s;}uint d(uint f,uint x,uint y,uint t){uint s=((f<<6|x)<<6|y)<<14|t;return s;}uint i(uint f,uint x,uint y,uint t){uint s=((f<<5|x)<<4|y)<<18|t;return s;}float k(float3 f){float s=dot(round(f*255),float3(65536,256,1));return s;}void i(int3 u,float x){if(u.x>254||u.y>254||u.z>254||u.x<1||u.y<1||u.z<1){return;}int e=f(u.x,u.y,u.z,256);float3 s=gridData[e];if(s.z==0.){return;}float r[8];uint y=0;for(int m=0;m<8;++m){int3 M=u+localGridCellCoords[m];int t=f(M.x,M.y,M.z,256);float3 g=gridData[t];if(g.z==0.){return;}r[m]=g.x;if(g.x<=0.)y|=1<<m;}int t=cubeEdgeFlags[y];if(t==0){return;}int z=y*16,M=triangleConnectionTable[z+3];float g=n(r[edgeConnection[M].x],r[edgeConnection[M].y]);float3 S=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[z+4];g=n(r[edgeConnection[M].x],r[edgeConnection[M].y]);float3 o=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[z+5];g=n(r[edgeConnection[M].x],r[edgeConnection[M].y]);float3 p=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M],v=S+o+p,D=cross(p-S,o-S);if(dot(D,D)>0.){M=triangleConnectionTable[z];g=n(r[edgeConnection[M].x],r[edgeConnection[M].y]);S=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[z+1];g=n(r[edgeConnection[M].x],r[edgeConnection[M].y]);o=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[z+2];g=n(r[edgeConnection[M].x],r[edgeConnection[M].y]);p=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];D+=cross(p-S,o-S);M=triangleConnectionTable[z+6];g=n(r[edgeConnection[M].x],r[edgeConnection[M].y]);S=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[z+7];g=n(r[edgeConnection[M].x],r[edgeConnection[M].y]);o=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[z+8];g=n(r[edgeConnection[M].x],r[edgeConnection[M].y]);p=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];D+=cross(p-S,o-S);M=triangleConnectionTable[z+9];g=n(r[edgeConnection[M].x],r[edgeConnection[M].y]);S=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[z+10];g=n(r[edgeConnection[M].x],r[edgeConnection[M].y]);o=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[z+11];g=n(r[edgeConnection[M].x],r[edgeConnection[M].y]);p=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];D+=cross(p-S,o-S);D=normalize(D);v/=3;int k=s.y,w=s.z;float3 d=v-float3(.5,.5,.5);float b=dot(d,D);float3 R=D;R/=abs(R.x)+abs(R.y)+abs(R.z);R.xy=R.z>=0.?R.xy:i(R.xy);R.xy=R.xy*.5+.5;b=b*.5+.5;int3 a=c(k);int l=0;InterlockedAdd(gs_numElements,1,l);if(l<255)gs_pointCloudData[l]=int3(c(u.x,u.y,u.z,uint(round(R.x*255.))),f(uint(round(b*63.)),uint(round(a.x/256.*63.)),uint(round(a.y/256.*63.)),uint(round(a.z/256.*63.)),uint(round(R.y*255.))),w);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void generatePointCloud(int3 u:SV_DispatchThreadID,uint s:SV_GroupIndex){if(u.x>254||u.y>254||u.z>254||u.x<1||u.y<1||u.z<1){return;}float t=chunkSize/256;int M=f(u.x,u.y,u.z,256);float3 r=gridData[M];if(r.z==0.){return;}float e[8];uint x=0;for(int m=0;m<8;++m){int3 g=u+localGridCellCoords[m];int y=f(g.x,g.y,g.z,256);float3 v=gridData[y];if(v.z==0.){return;}e[m]=v.x;if(v.x<=0.)x|=1<<m;}int g=cubeEdgeFlags[x];if(g==0){return;}int y=x*16,z=triangleConnectionTable[y+3];float S=n(e[edgeConnection[z].x],e[edgeConnection[z].y]);float3 v=vertexOffset[edgeConnection[z].x]-S*edgeDirection[z];z=triangleConnectionTable[y+4];S=n(e[edgeConnection[z].x],e[edgeConnection[z].y]);float3 o=vertexOffset[edgeConnection[z].x]-S*edgeDirection[z];z=triangleConnectionTable[y+5];S=n(e[edgeConnection[z].x],e[edgeConnection[z].y]);float3 p=vertexOffset[edgeConnection[z].x]-S*edgeDirection[z],R=v+o+p,D=cross(p-v,o-v);if(dot(D,D)>0.){z=triangleConnectionTable[y];S=n(e[edgeConnection[z].x],e[edgeConnection[z].y]);v=vertexOffset[edgeConnection[z].x]-S*edgeDirection[z];z=triangleConnectionTable[y+1];S=n(e[edgeConnection[z].x],e[edgeConnection[z].y]);o=vertexOffset[edgeConnection[z].x]-S*edgeDirection[z];z=triangleConnectionTable[y+2];S=n(e[edgeConnection[z].x],e[edgeConnection[z].y]);p=vertexOffset[edgeConnection[z].x]-S*edgeDirection[z];D+=cross(p-v,o-v);z=triangleConnectionTable[y+6];S=n(e[edgeConnection[z].x],e[edgeConnection[z].y]);v=vertexOffset[edgeConnection[z].x]-S*edgeDirection[z];z=triangleConnectionTable[y+7];S=n(e[edgeConnection[z].x],e[edgeConnection[z].y]);o=vertexOffset[edgeConnection[z].x]-S*edgeDirection[z];z=triangleConnectionTable[y+8];S=n(e[edgeConnection[z].x],e[edgeConnection[z].y]);p=vertexOffset[edgeConnection[z].x]-S*edgeDirection[z];D+=cross(p-v,o-v);z=triangleConnectionTable[y+9];S=n(e[edgeConnection[z].x],e[edgeConnection[z].y]);v=vertexOffset[edgeConnection[z].x]-S*edgeDirection[z];z=triangleConnectionTable[y+10];S=n(e[edgeConnection[z].x],e[edgeConnection[z].y]);o=vertexOffset[edgeConnection[z].x]-S*edgeDirection[z];z=triangleConnectionTable[y+11];S=n(e[edgeConnection[z].x],e[edgeConnection[z].y]);p=vertexOffset[edgeConnection[z].x]-S*edgeDirection[z];D+=cross(p-v,o-v);D=normalize(D);R/=3;int k=r.y,d=r.z;float3 b=R-float3(.5,.5,.5);float a=dot(b,D);float3 l=D;l/=abs(l.x)+abs(l.y)+abs(l.z);l.xy=l.z>=0.?l.xy:i(l.xy);l.xy=l.xy*.5+.5;a=a*.5+.5;int3 w=c(k);uint I=0;InterlockedAdd(numPointsInChunk[chunkId],3,I);I/=3;int2 X=int2(c(u.x,u.y,u.z,uint(round(l.x*255.))),f(uint(round(a*63.)),uint(round(w.x/256.*63.)),uint(round(w.y/256.*63.)),uint(round(w.z/256.*63.)),uint(round(l.y*255.))));chunkPointCloudData[chunkId*maxPointCount+I]=X;if(storeSolidId==1)chunkPointCloudDataToSolidId[chunkId*maxPointCount+I]=d;}}int4 g(uint f){uint i=f>>24,u=(16711680&f)>>16,y=(65280&f)>>8,z=255&f;return int4(i,u,y,z);}void g(uint f,uint t){uint z=f/5,M=round(float(float(f)/5.-z)*5),i=pointToChunkId[z],u[5];u[0]=i&63;i>>=6;u[1]=i&63;i>>=6;u[2]=i&63;i>>=6;u[3]=i&63;i>>=6;u[4]=i&63;u[M]=t;uint s=(((u[4]<<6|u[3])<<6|u[2])<<6|u[1])<<6|u[0];pointToChunkId[z]=s;}uint k(uint f,uint x){uint z=f/5,i=6*round(float(float(f)/5.-z)*5),u=(1<<6)-1&x>>i;return u;}[numthreads(1,1,1)]void compactPointCloud(int3 f:SV_DispatchThreadID){int z=f.x+f.y*numChunksX+numChunksX*numChunksY*f.z;uint i=numPointsInChunk[z],u;InterlockedAdd(indirectDrawArgs[0],i,u);uint s=i/3;u/=3;for(uint x=0;x<s;++x){uint M=u+x;pointCloudDataMip3[M]=chunkPointCloudData[z*maxPointCount+x];g(M,z);if(storeSolidId==1)pointCloudDataToSolidId[M]=chunkPointCloudDataToSolidId[z*maxPointCount+x];}}[numthreads(1,1,1)]void optimizePointCloud(int3 f:SV_DispatchThreadID){uint s=indirectDrawArgs[0],i=s/3,u=i;for(uint z=0;z<i;++z){int4 r=g(pointCloudDataMip3[z].x);float y=frac(sin(dot(float2(r.x,r.y),float2(12.9898,78.233+r.z)))*43758.5);uint M=round(y*(u-1));u-=1;uint x=k(u,pointToChunkId[u/5]);int2 t=pointCloudDataMip3[u];pointCloudDataMip3[u]=pointCloudDataMip3[M];pointCloudDataMip3[M]=t;uint S=k(M,pointToChunkId[M/5]);g(u,S);g(M,x);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void debugDisplayGridPoints(int3 f:SV_DispatchThreadID){}float4 m(uint f){int i=(f&255)>>0,u=(f&65280)>>8,M=(f&16711680)>>16;return float4(i/255.,u/255.,M/255.,1.);}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGridForMesh(int3 i:SV_DispatchThreadID){float u=chunkSize/64;float3 s=c(i,u);int y=f(i.x,i.y,i.z,64);float3 x=chunksCenter[chunkId];uint z=0;float M=0.;c(s+x,u*.5,y,z,M);float t=u*.25,S=t*.5,r=u*.5,o=chunkSize/256,e=chunkSize*.5;int g=y*maxSolidsPerVoxelMask;for(uint m=0;m<maxSolidsPerVoxelMask;++m)solidsFilter[g+m]=-1;float k=d(s+x,u,M+u,z,y);for(uint n=0;n<8;++n){float3 v=s+t*cardinalCellOffset[n];for(uint p=0;p<8;++p){float3 D=v+S*cardinalCellOffset[p];int3 l=int3(round((D.x+e-S)/o),round((D.y+e-S)/o),round((D.z+e-S)/o));int w=f(l.x,l.y,l.z,256);gridData[w]=float3(0,0,0);int b=0;float3 a=float3(1.,1.,1.);float R=d(D+x,S,b,a,z,y,w);int X=solidsClayObjectId[b]+1;gridData[w]=float3(R,f(a),X);}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void p(int3 f:SV_DispatchThreadID){}float3 m(int3 i,out float3 u){float s=chunkSize/256;int z=f(i.x,i.y,i.z,256);float3 r=gridData[z];u=m(r.y).xyz;float t[8];int M=0,S=0;for(int x=0;x<8;++x){int3 g=i+localGridCellCoords[x];int e=f(g.x,g.y,g.z,256);float3 v=gridData[e];t[x]=v.x;if(v.z==0.){continue;}if(v.x<0.)M|=1<<x;}int g=cubeEdgeFlags[M];float3 y=c(i,s);int v=0;float3 e=float3(0,0,0);for(int o=0;o<12;++o){if((g&1<<o)!=0){float p=t[edgeConnection[o].x],D=t[edgeConnection[o].y],d=n(p,D);e+=y+(vertexOffset[edgeConnection[o].x]-d*edgeDirection[o])*s;v+=1;}}e/=v;return e;}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeMesh(int3 i:SV_DispatchThreadID){if(i.x>253||i.y>253||i.z>253){return;}else if(i.x<1||i.y<1||i.z<1){return;}int z=f(i.x+1,i.y+1,i.z+1,256);float3 u=gridData[z],x,y,r,s,S=chunksCenter[chunkId],t=m(int3(i.x,i.y,i.z),x)+S,c,g,M,e;int n=f(i.x,i.y+1,i.z+1,256);float3 p=gridData[n];if(sign(u.x)!=sign(p.x)){c=m(int3(i.x,i.y,i.z+1),y)+S;g=m(int3(i.x,i.y+1,i.z+1),r)+S;M=m(int3(i.x,i.y+1,i.z),s)+S;if(u.x>p.x)e=M,M=c,c=e,e=s,s=y,y=e;uint v=meshOutIndices.IncrementCounter();int o=v*3;meshOutPoints[o]=t;meshOutIndices[v][0]=o+outMeshIndexOffset;meshOutColors[o]=float4(x,1);o=v*3+1;meshOutPoints[o]=c;meshOutIndices[v][1]=o+outMeshIndexOffset;meshOutColors[o]=float4(y,1);o=v*3+2;meshOutPoints[o]=g;meshOutIndices[v][2]=o+outMeshIndexOffset;meshOutColors[o]=float4(r,1);v=meshOutIndices.IncrementCounter();o=v*3;meshOutPoints[o]=t;meshOutIndices[v][0]=o+outMeshIndexOffset;meshOutColors[o]=float4(x,1);o=v*3+1;meshOutPoints[o]=g;meshOutIndices[v][1]=o+outMeshIndexOffset;meshOutColors[o]=float4(r,1);o=v*3+2;meshOutPoints[o]=M;meshOutIndices[v][2]=o+outMeshIndexOffset;meshOutColors[o]=float4(s,1);}n=f(i.x+1,i.y,i.z+1,256);p=gridData[n];if(sign(u.x)!=sign(p.x)){c=m(int3(i.x,i.y,i.z+1),y)+S;g=m(int3(i.x+1,i.y,i.z+1),r)+S;M=m(int3(i.x+1,i.y,i.z),s)+S;if(u.x<p.x)e=M,M=c,c=e,e=s,s=y,y=e;uint v=meshOutIndices.IncrementCounter();int o=v*3;meshOutPoints[o]=t;meshOutIndices[v][0]=o+outMeshIndexOffset;meshOutColors[o]=float4(x,1);o=v*3+1;meshOutPoints[o]=c;meshOutIndices[v][1]=o+outMeshIndexOffset;meshOutColors[o]=float4(y,1);o=v*3+2;meshOutPoints[o]=g;meshOutIndices[v][2]=o+outMeshIndexOffset;meshOutColors[o]=float4(r,1);v=meshOutIndices.IncrementCounter();o=v*3;meshOutPoints[o]=t;meshOutIndices[v][0]=o+outMeshIndexOffset;meshOutColors[o]=float4(x,1);o=v*3+1;meshOutPoints[o]=g;meshOutIndices[v][1]=o+outMeshIndexOffset;meshOutColors[o]=float4(r,1);o=v*3+2;meshOutPoints[o]=M;meshOutIndices[v][2]=o+outMeshIndexOffset;meshOutColors[o]=float4(s,1);}n=f(i.x+1,i.y+1,i.z,256);p=gridData[n];if(sign(u.x)!=sign(p.x)){c=m(int3(i.x,i.y+1,i.z),y)+S;g=m(int3(i.x+1,i.y+1,i.z),r)+S;M=m(int3(i.x+1,i.y,i.z),s)+S;if(u.x>p.x)e=M,M=c,c=e,e=s,s=y,y=e;uint o=meshOutIndices.IncrementCounter();int v=o*3;meshOutPoints[v]=t;meshOutIndices[o][0]=v+outMeshIndexOffset;meshOutColors[v]=float4(x,1);v=o*3+1;meshOutPoints[v]=c;meshOutIndices[o][1]=v+outMeshIndexOffset;meshOutColors[v]=float4(y,1);v=o*3+2;meshOutPoints[v]=g;meshOutIndices[o][2]=v+outMeshIndexOffset;meshOutColors[v]=float4(r,1);o=meshOutIndices.IncrementCounter();v=o*3;meshOutPoints[v]=t;meshOutIndices[o][0]=v+outMeshIndexOffset;meshOutColors[v]=float4(x,1);v=o*3+1;meshOutPoints[v]=g;meshOutIndices[o][1]=v+outMeshIndexOffset;meshOutColors[v]=float4(r,1);v=o*3+2;meshOutPoints[v]=M;meshOutIndices[o][2]=v+outMeshIndexOffset;meshOutColors[v]=float4(s,1);}}[numthreads(1,1,1)]void filterSolidsPerChunk(int3 f:SV_DispatchThreadID){int z=f.x+f.y*numChunksX+numChunksX*numChunksY*f.z;float y=chunkSize/256.*seamOffsetMultiplier,i=chunkSize-y,u=chunkSize*.5;float3 s=float3(-(chunkSize*numChunksX*.5)+u+i*f.x,-(chunkSize*numChunksY*.5)+u+i*f.y,-(chunkSize*numChunksZ*.5)+u+i*f.z);chunksCenter[z]=s;float x=chunkSize*1.732*.5;int M=z*3,r=updateChunks[z]-1;if(r<-1)r=-1;int o=0;for(uint e=0;e<numSolids;++e){float3 g=solidsScale[e];float t=max(g.x,max(g.y,g.z))*1.732;float3 S=s;if(checkMirrorX(solidsAttrs[e].w))S.x=abs(S.x);float3 p=solidsPos[e];float c=length(p-S)-t;if(c<x){solidsPerChunk[z*maxSolids+o]=e;o+=1;if(r<=0){for(uint m=0;m<numSolidsUpdated;++m){uint v=solidsUpdated[m];if(v==e){r=1;break;}}}}}numSolidsPerChunk[z]=o;uint t=0,m=0;if(r>-1){t=64/MAXTHREADS;m=256/MAXTHREADS;uint v=z*6;boundingBox[v]=64;boundingBox[v+1]=64;boundingBox[v+2]=64;boundingBox[v+3]=0;boundingBox[v+4]=0;boundingBox[v+5]=0;numPointsInChunk[z]=0;}updateChunks[z]=r;indirectChunkArgs1[M]=t;indirectChunkArgs1[M+1]=t;indirectChunkArgs1[M+2]=t;indirectChunkArgs2[M]=m;indirectChunkArgs2[M+1]=m;indirectChunkArgs2[M+2]=m;}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void generatePointCloudMicroVoxels(int3 u:SV_DispatchThreadID){int z=f(u.x,u.y,u.z,64);uint s=chunkId*262144,M=s+z;gridPointersMip2[M]=-1;if(gridDataLowRes[z]==999.){return;}float3 v=float3(0,0,0),r=float3(0,0,0),m=float3(0,0,0);int y=0;for(uint x=0;x<64;++x){int3 g=cellTable[x],o=int3(u.x*4+g.x,u.y*4+g.y,u.z*4+g.z);uint S=f(uint(g.x),uint(g.y),uint(g.z),4),e=0;float t[8]={0,0,0,0,0,0,0,0};int p=0,D=0;for(int k=0;k<8;++k){int3 l=o+localGridCellCoords[k];if(l.x<1||l.y<1||l.z<1||l.x>253||l.y>253||l.z>253){return;}int w=f(l.x,l.y,l.z,256);float3 a=gridData[w];float b=a.x;if(b==0.){continue;}t[k]=b;if(b<=0.)e|=1<<k,D=a.z,p=a.y;}int b=cubeEdgeFlags[e];if(b==0){continue;}int w=e*16;float3 R=float3(0,0,0),l=float3(0,0,0);int a=0;for(int I=0;I<5;++I){int X=I*3,Y=triangleConnectionTable[w+X];if(Y>-1){float Z=n(t[edgeConnection[Y].x],t[edgeConnection[Y].y]);float3 C=vertexOffset[edgeConnection[Y].x]-Z*edgeDirection[Y];Y=triangleConnectionTable[w+X+1];Z=n(t[edgeConnection[Y].x],t[edgeConnection[Y].y]);float3 h=vertexOffset[edgeConnection[Y].x]-Z*edgeDirection[Y];Y=triangleConnectionTable[w+X+2];Z=n(t[edgeConnection[Y].x],t[edgeConnection[Y].y]);float3 O=vertexOffset[edgeConnection[Y].x]-Z*edgeDirection[Y];R+=C+h+O;l+=cross(O-C,h-C);a+=3;}else{break;}}if(a>0){R/=a;float3 X=R-.5;l=normalize(l);float Z=dot(X,l);Z=Z*.5+.5;v+=R;r+=l;float3 Y=l;Y/=abs(Y.x)+abs(Y.y)+abs(Y.z);Y.xy=Y.z>=0.?Y.xy:i(Y.xy);Y.xy=Y.xy*.5+.5;int3 h=c(p);float3 O=float3(h.x*.00390625,h.y*.00390625,h.z*.00390625);m+=O;uint C=c(S,uint(round(Z*255.)),uint(round(Y.x*255.)),uint(round(Y.y*255.))),T=d(uint(round(O.x*63.)),uint(round(O.y*63.)),uint(round(O.z*63.)),D),P=z*128+y*2;prefilteredSolidIds[P]=C;prefilteredSolidIds[P+1]=T;y+=1;}}if(y>0){v/=y;r=normalize(r);m/=y;float3 g=v-.5;float t=dot(g,r);t=t*.5+.5;float3 o=r;o/=abs(o.x)+abs(o.y)+abs(o.z);o.xy=o.z>=0.?o.xy:i(o.xy);o.xy=o.xy*.5+.5;uint e=chunkId*16777216,S=0;InterlockedAdd(volumetricDraw[7],64,S);for(uint p=0;p<64;++p)gridPointersMip3[e+S+p]=-1;uint D=0;InterlockedAdd(volumetricDraw[6],y+1,D);uint k=0;for(int b=0;b<y;++b){uint Y=z*128+b*2;int2 l=int2(prefilteredSolidIds[Y],prefilteredSolidIds[Y+1]);pointCloudDataMip3[e+D+b+1]=l;k=l.x>>24;gridPointersMip3[e+S+k]=f(b,D);}uint l=uint(round(o.x*255.)),w=uint(round(o.y*255.)),X=uint(round(t*255.)),a=c(y,l,w,X);int2 R=int2(S,a);pointCloudDataMip3[e+D]=R;gridPointersMip2[M]=D;uint Y=chunkId*6;InterlockedMin(boundingBox[Y],u.x);InterlockedMin(boundingBox[Y+1],u.y);InterlockedMin(boundingBox[Y+2],u.z);InterlockedMax(boundingBox[Y+3],u.x);InterlockedMax(boundingBox[Y+4],u.y);InterlockedMax(boundingBox[Y+5],u.z);}}